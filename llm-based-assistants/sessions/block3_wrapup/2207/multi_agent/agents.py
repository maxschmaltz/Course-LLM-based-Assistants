from langchain_core.messages import AIMessage
from typing import List, Dict

from multi_agent.tools import query_knowledge_graph


class ResearchLaMA:

    def __init__(self, **kwargs):
        
        """
        Initialize the ResearchLaMA. It should also initialize all the agents.
        """

        self.llm = ...
        self.literature_reviewer = ...
        self.hypothesis_generator = ...
        self.validator = ...
        pass

    def literature_reviewer_node(self, query: str) -> AIMessage:
        
        """
        Get the literature reviewer to find and process research papers and extract key information.
        The agent has a RAG tool to extract relevant literature fragments from the literature base.
        
        Args:
            query (str): The research question to investigate
            
        Returns:
            AIMessage: The analysis of relevant papers with key findings
        """


    def hypothesis_generator_node(self, literature_analysis: str, query: str) -> List[dict]:
        
        """
        Generate research hypotheses based on literature findings retrieved by the reviewer.
        
        Args:
            literature_analysis (str): The structured analysis from literature reviewer
            query (str): The research question to investigate
            
        Returns:
            List[dict]: Multiple hypotheses with reasoning and confidence scores
        """

        pass

    def validator_node(self, hypotheses: List[dict]) -> AIMessage:

        """
        Fact-check hypotheses against knowledge graph, (re)assign confidence scores,
        Make final decisions on hypothesis validity.
        If the hypotheses contradict the knowledge graph or are not reliable, provide feedback for refinement.
        
        Args:
            hypotheses (List[dict]): The hypotheses generated by the hypothesis generator
            
        Returns:
            AIMessage: Final hypotheses with reasoning and confidence scores or feedback for refinement
        """

        pass

    def refine_hypotheses(self, feedback: str, hypotheses: List[dict]) -> List[dict]:

        """
        Refine hypotheses based on feedback from the validator.
        
        Args:
            feedback (str): Feedback from the validator
            hypotheses (List[dict]): The hypotheses to refine
            
        Returns:
            List[dict]: Refined hypotheses with updated reasoning and confidence scores
        """

        pass

    def run(self, research_question: str) -> Dict:

        """
        Run the research pipeline with the given research question.
        
        Args:
            research_question (str): The research question to investigate
            
        Returns:
            Dict: Complete research output with hypotheses, validation results, and reasoning
        """

        pass